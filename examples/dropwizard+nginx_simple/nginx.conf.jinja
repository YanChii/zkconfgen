{# Dropwizard keeps ephemeral instance nodes in zookeeper tree as /<env>/service/<svc_name>/<instances+data>
Example: /test/service/myservice/b4eaecea-99e5-4f14-8c53-e35adb34bcd2
We'll sort services according to the {{env}} and also add a suffix of "-{{env}}" to all service names.

Output of this template is final nginx.conf file.

#}

user nginx;
worker_processes 1;
error_log /var/log/nginx/error.log warn;
pid /run/nginx.pid;

events {
	worker_connections 1024;
}

http {
	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
		'$status $body_bytes_sent "$http_referer" '
		'"$http_user_agent" "$ssl_client_s_dn" "$http_x_forwarded_for" "$upstream_addr" "$host"';

	access_log  /var/log/nginx/access.log  main;

	sendfile			on;
	tcp_nopush			on;
	tcp_nodelay			on;
	keepalive_timeout	65;
	types_hash_max_size	2048;
	#gzip				on;
	client_max_body_size	16M;

	include			/etc/nginx/mime.types;
	default_type	application/octet-stream;

	# Load modular configuration files from the /etc/nginx/conf.d directory.
	# See http://nginx.org/en/docs/ngx_core_module.html#include
	# for more information.
	include /etc/nginx/conf.d/*.conf;

	proxy_next_upstream error timeout invalid_header;
	proxy_connect_timeout 1s;
	#proxy_set_header	Host			$host;
	proxy_set_header	X-Real-IP		$remote_addr;
	proxy_set_header	X-Forwarded-For	$proxy_add_x_forwarded_for;
	proxy_buffers		256	4k;
	proxy_pass_header	Referer;
	proxy_pass_header	Origin;


	# UPSTREAM SERVICES LIST GENERATED FROM ZOOKEEPER
	{%- for searchbase in ZK_TREE -%}
	{% set env = searchbase.split('/')[1] %}
	{% for svctype in ZK_TREE[searchbase] -%}
	upstream {{svctype}}-{{env}} {
	{%- for svcinstance in ZK_TREE[searchbase][svctype] %}
			server {{ZK_TREE[searchbase][svctype][svcinstance]['payload']['listenAddress']}}:{{ZK_TREE[searchbase][svctype][svcinstance]['payload']['listenPort']}};
	{%- endfor %}
	}

	{% endfor %}
	{% endfor %}

	# SERVICES PROXY SERVER SSL
	server {
		listen		80;
		listen		[::]:80;
		server_name	svcproxy.example.com;
		root	 /usr/share/nginx/html;		# use empty/nonexistent directory because we don't server any local content


		# URL SERVICES LIST
		{# Create an URL for each service in ZK. URL will proxy all requests to a respective service instance.
		E.g: call to /test/myservice/ will call (and failover/loadballance) an service instance of myservice that is registered in zookeeper in /test/service/myservice/*
		example output:
		location /test/myservice/ {
			proxy_pass http://myservice-test/;
		}
		#}

		{%- for searchbase in ZK_TREE -%}
		{% set env = searchbase.split('/')[1] %}
		{% for svctype in ZK_TREE[searchbase] -%}
		location /{{env}}/{{svctype}}/ {
			proxy_pass http://{{svctype}}-{{env}}/;
		}

		{% endfor %}
		{% endfor %}
	}
}
